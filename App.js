const TelegramBot = require('node-telegram-bot-api');
const sqlite3 = require('sqlite3').verbose();

const token = '5934121092:AAEmFla6FYWE_gJ_nvuSa7wyOJpZ1248LgA';
const bot = new TelegramBot(token, { polling: true });
process.title = "Telegram bot";

const buttons = [
    [{ text: 'üìí –ö–∞—Ç–∞–ª–æ–≥', callback_data: 'Catalog' }],
    [{ text: 'üöó –î–æ—Å—Ç–∞–≤–∫–∞', callback_data: 'Shipping' }],
    [{ text: '‚òéÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å', url: 'https://t.me/kvpotekhin' }],
    [{ text: 'üõí –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'My orders' }],
];

// –ü–æ–¥—É–º–∞—Ç—å –Ω–∞–¥ –æ—á–∏—Å—Ç–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π
bot.onText(/\/start/, async function (msg, match) {
    try {
        const chatId = msg.chat.id

        let db = new sqlite3.Database('./data.db', (err) => { if (err) { console.error(err) } });
        let user = new Promise(async (resolve, rejects) => {
            db.each(`SELECT COUNT(userid) FROM Users WHERE userid == "${chatId}"`, async (err, row) => {
                if (err) {
                    console.error(err)
                }
                resolve(await row["COUNT(userid)"])
            })
        })
        db.close((err) => { if (err) { console.error(err) } })

        if (await user == 0) {
            console.log(`–£—Ö —Ç—ã –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${msg.chat.username}[${chatId}]`)

            let db = new sqlite3.Database('./data.db', (err) => { if (err) { console.error(err) } });
            new Promise(async (resolve, rejects) => {
                // –î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                db.run(`INSERT INTO Users (userid, first_name, last_name, username, date_registration) VALUES ("${chatId}", "${msg.chat.first_name}", "${msg.chat.last_name}", "${msg.chat.username}", "${getToday()}");`, async (err, row) => {
                    if (err) {
                        console.error(err)
                    }
                    resolve(await row)
                })
            })
            db.close((err) => { if (err) { console.error(err) } })

            bot.sendMessage(chatId, `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ${msg.chat.first_name} ${msg.chat.last_name} –≤ SHAPKIN üß£`, {
                reply_markup: JSON.stringify({
                    inline_keyboard: [...buttons]
                })
            });
        } else if (chatId == 234044513) {
            console.log(`–û—Ç–µ—Ü –≤ —Ö–∞—Ç–µ!`)
            bot.sendMessage(chatId, `–û—Ç–µ—Ü SHAPKIN –≤ —Ö–∞—Ç–µ üß£`, {
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        ...buttons,
                        [{ text: "‚öôÔ∏è Admin", callback_data: "Admin" }]
                    ]
                })
            });
        } else {
            console.log(`–û–ø—è—Ç—å —Ç—ã ${msg.chat.username}[${chatId}]!`)
            bot.sendMessage(chatId, `–ß—Ç–æ-—Ç–æ –≤—ã –∑–∞—á–∞—Å—Ç–∏–ª–∏ –≤ SHAPKIN üß£`, {
                reply_markup: JSON.stringify({
                    inline_keyboard: [...buttons]
                })
            });
        }
    } catch (error) {
        console.log(error)
    }
});
bot.on('message', async function (msg) {
    try {
        if (msg.text != "/start") {
            const chatId = msg.chat.id
            bot.sendMessage(chatId, `–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —á—Ç–æ –≤—ã –ø–∏—à–∏—Ç–µ, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ /start`);
        }
    } catch (error) {
        console.log(error)
    }
});
bot.on('callback_query', async (query) => {
    try {
        const data = query.data;
        const msg = query.message;

        let arraySeasons = await getSeasons();
        let arrayTypes = await getProductTypes();

        let sended = false;
        for (let i = 0; i < arraySeasons.length; i++) {
            for (let j = 0; j < arrayTypes.length; j++) {
                switch (data) {
                    case arrayTypes[j][0].callback_data:
                        // const option = [
                        //     {
                        //         type: 'photo',
                        //         media: 'https://cdn.searchenginejournal.com/wp-content/uploads/2022/06/image-search-1600-x-840-px-62c6dc4ff1eee-sej.png',
                        //         caption: 'Image One'
                        //     },
                        //     {
                        //         type: 'photo',
                        //         media: 'https://www.simplilearn.com/ice9/free_resources_article_thumb/what_is_image_Processing.jpg',
                        //         caption: 'Image Two'
                        //     },
                        //     {
                        //         type: 'photo',
                        //         media: 'https://images.unsplash.com/photo-1575936123452-b67c3203c357?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8aW1hZ2V8ZW58MHx8MHx8&w=1000&q=80',
                        //         caption: 'Image Three'
                        //     },
                        //     {
                        //         type: 'text',
                        //         text: 'This is text message',
                        //         reply_markup: {
                        //             inline_keyboard: [
                        //                 // ...await getProducts(arraySeasons[i][0].callback_data, data),
                        //                 [{ text: '‚ùå –ù–∞–∑–∞–¥', callback_data: 'Catalog' }],
                        //             ]
                        //         }
                        //     }
                        // ]
                        // bot.sendMediaGroup(msg.chat.id, option);
                        bot.editMessageText("[–í–æ—Ç –≤–∞–º —à–∞–ø–æ—á–∫–∞!](https://raw.githubusercontent.com/eugenepokalyuk/profile/main/images/logo__orange.png?token=GHSAT0AAAAAAB436I4NWUYYBSEXZCX6WECUY7RDTVQ)\n–¶–≤–µ—Ç —Å–∏–Ω–∏–π\n–¶–µ–Ω–∞ 5 –º–ª–Ω —Ä—É–±–ª–µ–π", {
                            chat_id: msg.chat.id,
                            message_id: msg.message_id,
                            parse_mode: "markdown",
                            reply_markup: {
                                inline_keyboard: [
                                    ...await getProducts(arraySeasons[i][0].callback_data, data),
                                    [{ text: '‚ùå –ù–∞–∑–∞–¥', callback_data: 'Catalog' }],
                                ]
                            }
                        });
                        sended = true;
                        break;
                    case arraySeasons[i][0].callback_data:
                        bot.editMessageText(`üìí –ö–∞—Ç–∞–ª–æ–≥ => ${data}`, {
                            chat_id: msg.chat.id,
                            message_id: msg.message_id,
                            reply_markup: {
                                inline_keyboard: [
                                    ...await getTypes(data),
                                    [{ text: '‚ùå –ù–∞–∑–∞–¥', callback_data: 'Catalog' }],
                                ]
                            }
                        });
                        sended = true;
                        break;

                    case "Catalog":
                        bot.editMessageText('üìí –ö–∞—Ç–∞–ª–æ–≥', {
                            chat_id: msg.chat.id,
                            message_id: msg.message_id,
                            reply_markup: {
                                inline_keyboard: [
                                    ...await getSeasons(),
                                    [{ text: '‚ùå –ù–∞–∑–∞–¥', callback_data: 'back' }],
                                ]
                            }
                        });
                        sended = true;
                        break;
                    case "Shipping":
                        bot.editMessageText('üöó –î–æ—Å—Ç–∞–≤–∫–∞', {
                            chat_id: msg.chat.id,
                            message_id: msg.message_id,
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: "Box Berry", callback_data: "Shipping_tool(Box Berry)" }],
                                    [{ text: "–°–î–≠–ö", callback_data: "Shipping_tool(–°–î–≠–ö)" }],
                                    [{ text: "–ü–æ—á—Ç–∞ –†–§", callback_data: "Shipping_tool(–ü–æ—á—Ç–∞ –†–§)" }],
                                    [{ text: '‚ùå –ù–∞–∑–∞–¥', callback_data: 'back' }],
                                ]
                            }
                        });
                        break;
                    case "Feedback":
                        bot.editMessageText('‚òéÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å', {
                            chat_id: msg.chat.id,
                            message_id: msg.message_id,
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: '‚ùå –ù–∞–∑–∞–¥', callback_data: 'back' }],
                                ]
                            }
                        });
                        break;

                    case "Shipping_tool(–ü–æ—á—Ç–∞ –†–§)":
                        bot.editMessageText('üöó –î–æ—Å—Ç–∞–≤–∫–∞ –ü–æ—á—Ç–∞ –†–§\n—Ç–∞–º –æ–∫–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äì –≥–æ—Ä–æ–¥, –∏–Ω–¥–µ–∫—Å, –∞–¥—Ä–µ—Å, —Ñ–∏–æ —Ç–µ–ª–µ—Ñ–æ–Ω, –¥–∞–ª–µ–µ —É–∂–µ –∏—Å—Ö–æ–¥—è –∏–∑ –≤–µ—Å–∞ –∏ –≥–æ—Ä–æ–¥–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è.', {
                            chat_id: msg.chat.id,
                            message_id: msg.message_id,
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: '‚ùå –ù–∞–∑–∞–¥', callback_data: 'Shipping' }],
                                ]
                            }
                        });
                        break;
                    case "Shipping_tool(–°–î–≠–ö)":
                        bot.editMessageText('üöó –î–æ—Å—Ç–∞–≤–∫–∞ –°–î–≠–ö\n–≤—ã–±—Ä–∞—Ç—å –≤–∏–¥ –¥–æ—Å—Ç–∞–≤–∫–∏: —Å–∫–ª–∞–¥-—Å–∫–ª–∞–¥, —Å–∫–ª–∞–¥-–¥–≤–µ—Ä—å.\n–ï—Å–ª–∏ —Å–∫–ª–∞–¥-—Å–∫–ª–∞–¥, —Ç–æ –∞–¥—Ä–µ—Å –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–∫–ª–∞–¥–∞ –≥–¥–µ –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ –∑–∞–±—Ä–∞—Ç—å –ø–æ—Å–ª—ã–∫—É. –î–∞–Ω–Ω—ã–µ ‚Äì —Ñ–∏–æ, —Ç–µ–ª–µ—Ñ–æ–Ω.\n–ï—Å–ª–∏ —Å–∫–ª–∞–¥-–¥–≤–µ—Ä—å —Ç–æ –∞–¥—Ä–µ—Å –¥–æ–º–∞—à–Ω–∏–π, —Ñ–∏–æ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω.', {
                            chat_id: msg.chat.id,
                            message_id: msg.message_id,
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: '‚ùå –ù–∞–∑–∞–¥', callback_data: 'Shipping' }],
                                ]
                            }
                        });
                        break;
                    case "Shipping_tool(Box Berry)":
                        bot.editMessageText('üöó –î–æ—Å—Ç–∞–≤–∫–∞ Box Berry\n—Ñ–∏–æ, —Ç–µ–ª–µ—Ñ–æ–Ω, –∞–¥—Ä–µ—Å –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–æ–≤.', {
                            chat_id: msg.chat.id,
                            message_id: msg.message_id,
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: '‚ùå –ù–∞–∑–∞–¥', callback_data: 'Shipping' }],
                                ]
                            }
                        });
                        break;

                    case "My orders":
                        bot.editMessageText('üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞', {
                            chat_id: msg.chat.id,
                            message_id: msg.message_id,
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: '‚ùå –ù–∞–∑–∞–¥', callback_data: 'back' }],
                                ]
                            }
                        });
                        break;

                    case "back":
                        bot.editMessageText(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SHAPKIN üß£`, { // ‚ùå
                            chat_id: msg.chat.id,
                            message_id: msg.message_id,
                            reply_markup: {
                                inline_keyboard: buttons
                            }
                        });
                        break;
                    default:
                        break;
                }
                if (sended)
                    break;
            }
            if (sended)
                break;
        }
    } catch (error) {
        console.log(error)
    }
});

async function getSeasons() {
    try {
        let db = new sqlite3.Database('./data.db', (err) => { if (err) { console.error(err) } });
        let count_seasons = new Promise(async (resolve, rejects) => {
            db.each(`SELECT COUNT(id) FROM Season`, async (err, row) => {
                if (err) {
                    console.error(err)
                }
                resolve(await row["COUNT(id)"])
            })
        })
        db.close((err) => { if (err) { console.error(err) } })

        let array = [];

        if (await count_seasons != 0) {
            for (let i = 0; i < await count_seasons; i++) {
                let db = new sqlite3.Database('./data.db', (err) => { if (err) { console.error(err) } });
                let seasons = new Promise(async (resolve, rejects) => {
                    db.each(`SELECT season_name FROM Season WHERE id=${i}`, async (err, row) => {
                        if (err) {
                            console.error(err)
                        }
                        resolve(await row["season_name"])
                    })
                })
                db.close((err) => { if (err) { console.error(err) } })
                array.push([{ text: `${await seasons}`, callback_data: `${await seasons}` }])
            }
        }
        return array;
    } catch (error) {
        console.error(error.message)
    }
}
async function getProductTypes() {
    try {
        let db = new sqlite3.Database('./data.db', (err) => { if (err) { console.error(err) } });
        let count_types = new Promise(async (resolve, rejects) => {
            db.each(`SELECT COUNT(id) FROM Type`, async (err, row) => {
                if (err) {
                    console.error(err)
                }
                resolve(await row["COUNT(id)"])
            })
        })
        db.close((err) => { if (err) { console.error(err) } })

        let array = [];

        if (await count_types != 0) {
            for (let i = 0; i < await count_types; i++) {
                let db = new sqlite3.Database('./data.db', (err) => { if (err) { console.error(err) } });
                let types = new Promise(async (resolve, rejects) => {
                    db.each(`SELECT type_name FROM Type WHERE id=${i}`, async (err, row) => {
                        if (err) {
                            console.error(err)
                        }
                        resolve(await row["type_name"])
                    })
                })
                db.close((err) => { if (err) { console.error(err) } })
                array.push([{ text: `${await types}`, callback_data: `${await types}` }])
            }
        }
        return array;
    } catch (error) {
        console.error(error.message)
    }
}
async function getTypes(data) {
    try {
        if (data != undefined) {
            //#region [Get season ID]
            let db = new sqlite3.Database('./data.db', (err) => { if (err) { console.error(err) } });
            let season_id = new Promise(async (resolve, rejects) => {
                db.each(`SELECT season_id as id FROM Season WHERE season_name="${data}"`, async (err, row) => {
                    if (err) {
                        console.error(err)
                    }
                    resolve(await row["id"])
                })
            })
            db.close((err) => { if (err) { console.error(err) } })

            let sid = await season_id;
            //#endregion
            //#region [Get count types]
            db = new sqlite3.Database('./data.db', (err) => { if (err) { console.error(err) } });
            let count_types = new Promise(async (resolve, rejects) => {
                db.each(`SELECT COUNT(season_id) as id FROM Catalog WHERE season_id="${sid}"`, async (err, row) => {
                    if (err) {
                        console.error(err)
                    }
                    resolve(await row["id"])
                })
            })
            db.close((err) => { if (err) { console.error(err) } })

            let ct = await count_types; // 4
            //#endregion
            //#region [Get id IDs]
            db = new sqlite3.Database('./data.db', (err) => { if (err) { console.error(err) } });
            let temp = new Promise(async (resolve, rejects) => {
                let sql = `SELECT id FROM Catalog WHERE season_id="${sid}"`;
                db.all(sql, async (err, row) => {
                    if (err) {
                        console.error(err)
                    }
                    resolve(await row)
                })
            })
            db.close((err) => { if (err) { console.error(err) } })

            let id_arr = await temp;
            //#endregion
            //#region [Get uniq types]
            db = new sqlite3.Database('./data.db', (err) => { if (err) { console.error(err) } });
            let getUniqTypeIDs = new Promise(async (resolve, rejects) => {
                let sql = `SELECT DISTINCT type_id FROM Catalog WHERE season_id="${sid}"`;
                db.all(sql, async (err, row) => {
                    if (err) {
                        console.error(err)
                    }
                    resolve(await row)
                })
            })
            db.close((err) => { if (err) { console.error(err) } })

            let arrayUniqTypeIDs = await getUniqTypeIDs;
            //#endregion
            //#region [Get product type bnttons]
            let arrayResult = [];
            for (let i = 0; i < arrayUniqTypeIDs.length; i++) {
                const element = arrayUniqTypeIDs[i].type_id;
                let db = new sqlite3.Database('./data.db', (err) => { if (err) { console.error(err) } });
                let getProductTypeNames = new Promise(async (resolve, rejects) => {
                    let sql = `SELECT type_name FROM Type WHERE type_id="${element}"`;
                    db.each(sql, async (err, row) => {
                        if (err) {
                            console.error(err)
                        }
                        resolve(await row.type_name)
                    })
                })
                db.close((err) => { if (err) { console.error(err) } })
                arrayResult.push([{ text: `${await getProductTypeNames}`, callback_data: `${await getProductTypeNames}` }])
            }
            return arrayResult;
            //#endregion
        }
    } catch (error) {
        console.error(error)
    }
}
async function getProducts(seasonName, typeName) {
    try {
        if (seasonName != undefined && typeName != undefined) {
            let setSeasonId = await getSeasonId(seasonName); // 0
            let setTypeId = await getTypeId(typeName); // 0

            let db = new sqlite3.Database('./data.db', (err) => { if (err) { console.error(err) } });
            let temp = new Promise(async (resolve, rejects) => {
                db.all(`SELECT * FROM Catalog WHERE season_id="${setSeasonId}" AND type_id="${setTypeId}"`, async (err, row) => {
                    if (err) {
                        console.error(err)
                    }
                    resolve(await row)
                })
            })
            db.close((err) => { if (err) { console.error(err) } })

            console.log(await temp);
            if (await temp.length == 0) {
                return [
                    [{ text: `–¢—É—Ç –Ω–∏—á–µ–≥–æ –Ω–µ—Ç`, callback_data: `n\\f` }]
                ]
            } else {
                return [
                    [{ text: `1 —Ç–æ–≤–∞—Ä`, callback_data: `item` }, { text: `2 —Ç–æ–≤–∞—Ä`, callback_data: `item` }],
                    [{ text: `1 —Ç–æ–≤–∞—Ä`, callback_data: `item` }, { text: `2 —Ç–æ–≤–∞—Ä`, callback_data: `item` }, { text: `3 —Ç–æ–≤–∞—Ä`, callback_data: `item` }],
                    [{ text: `1 —Ç–æ–≤–∞—Ä`, callback_data: `item` }, { text: `2 —Ç–æ–≤–∞—Ä`, callback_data: `item` }, { text: `3 —Ç–æ–≤–∞—Ä`, callback_data: `item` }, { text: `4 —Ç–æ–≤–∞—Ä`, callback_data: `item` }],
                    [{ text: `XS`, callback_data: `item` }, { text: `S`, callback_data: `item` }, { text: `M`, callback_data: `item` }, { text: `L`, callback_data: `item` }, { text: `XL`, callback_data: `item` }],
                ]
            }
        }
    } catch (error) {
        console.error(error)
    }
}

async function getSeasonId(data) {
    try {
        let db = new sqlite3.Database('./data.db', (err) => { if (err) { console.error(err) } });
        let season_id = new Promise(async (resolve, rejects) => {
            db.each(`SELECT season_id as id FROM Season WHERE season_name="${data}"`, async (err, row) => {
                if (err) {
                    console.error(err)
                }
                resolve(await row["id"])
            })
        })
        db.close((err) => { if (err) { console.error(err) } })

        return await season_id;
    } catch (error) {
        console.error(error)
    }
}
async function getTypeId(data) {
    try {
        let db = new sqlite3.Database('./data.db', (err) => { if (err) { console.error(err) } });
        let season_id = new Promise(async (resolve, rejects) => {
            db.each(`SELECT type_id as id FROM Type WHERE type_name="${data}"`, async (err, row) => {
                if (err) {
                    console.error(err)
                }
                resolve(await row["id"])
            })
        })
        db.close((err) => { if (err) { console.error(err) } })

        return await season_id;
    } catch (error) {
        console.error(error)
    }
}

function getToday() {
    try {
        const today = new Date();
        const yyyy = today.getFullYear();
        let mm = today.getMonth() + 1;
        let dd = today.getDate();

        if (dd < 10) dd = '0' + dd;
        if (mm < 10) mm = '0' + mm;

        const formattedToday = dd + '/' + mm + '/' + yyyy;

        return formattedToday;
    } catch (error) {
        console.error(error)
    }
}